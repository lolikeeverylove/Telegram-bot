from random import choice
import telebot
from telebot import types
from telebot.types import Message
import mysql.connector
from crontab import CronTab

conn = mysql.connector.connect(user="root", password="pass", host="127.0.0.1", database="vagina")
cursor = conn.cursor(buffered=True)


# message.from_user.id —ç—Ç–æ —Ç–æ—Ç –æ—Ç –∫–æ–≥–æ –ø—Ä–∏—à–ª–æ –¥–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
# –Ω–∞–∂–º–∏ —Å –∑–∞–∂–∞—Ç–æ–π q –ø–æ —Ç–∞–π–ø—Å –∏ –Ω–∞–π–¥–∏ —é–∑–µ—Ä –∏ —Ç–∞–º –≤—Å–µ –º–µ—Ç–æ–¥—ã –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –≤ –±–¥))
bot = telebot.TeleBot('962102849:AAHmDtPsD8xJrf_6lC0HmfUTpzmz4i9hLuY')
name = ''
family = ''
age = 0
photoNumber = 1
smile = ['üòâ', 'üíã', 'üôä', 'üòâ', 'üòè', 'üòã', 'üòÑ', 'üòÅ', 'üòÜ', 'üòÖ', 'üòÇ']




# CALLBACK_BUTTON_LEFT:"hui"

#create klaviaturu
# def get_base_inline_keyboard():
#     keyboard = [
#         InlineKeyboardButton (TITLES[CALLBACK_BUTTON_LEFT]) ,callback_data=CALLBACK_BUTTON_LEFT),
#         InlineKeyboardButton(TITLES[CALLBACK_BUTTON_RIGHT]), callback_data = CALLBACK_BUTTON_LEFT)
#     ]
#     return InlineKeyboardButton(keyboard)




@bot.message_handler(content_types=['text', 'document', 'audio'])
# –ê–Ω–æ—Ç–∞—Ü–∏—è –≥–æ–≤–æ—Ä–∏—Ç. —á—Ç–æ —ç—Ç–æ –∏–º–µ–Ω–Ω–æ –∫–ª–∞—Å—Å Message,
# –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π —ç—Ç–æ–≥–æ –∫–ª–∞—Å—Å–∞
# –º–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –¥–µ–ª–∞—Ç—å —Å–æ —Å—Ç—Ä–∏–Ω–≥–∞–º–∏ –∏ —Ç.–ø.
# –≤ —Ü–µ–ª–æ–º –º–æ–∂–Ω–æ –∏ —Å—Ç—Ä–æ—á–∫–∏ —Ç—É–¥–∞ –∑–∞–∫–∏–Ω—É—Ç—å –ø–æ–∫–∞ –º–µ—Å—ç–¥–∂ –Ω–µ –∫–∏–Ω—É–ª)
def get_text_messages(message: Message):

    if message.text == "Hello" or message.text == "hello" or message.text == "–ü—Ä–∏–≤–µ—Ç" or message.text == "–ø—Ä–∏–≤–µ—Ç":
        bot.send_message(message.from_user.id, "–ü—Ä–∏–≤–µ—Ç, —á–µ–º —è –º–æ–≥—É —Ç–µ–±–µ –ø–æ–º–æ—á—å? " + choice(smile))
    elif message.text == "/help":
        bot.send_message(message.from_user.id, "/reg - registration\n"
                                               "/rules -important information \n"
                                               "/sendMem - send mem for you\n"
                                               "or write hello " + smile[1] +
                         "\n/dealFinder - buy sneakers")
    elif message.text == "/reg":
        bot.send_message(message.from_user.id, "–ö–∞–∫–æ–µ –≤–∞—à–µ –∏–º—è?")
                         # reply_markup=get_base_inline_keyboard)
        bot.register_next_step_handler(message, name)  # step - —à–∞–≥
    elif message.text == "/sendMem":
        global photoNumber
        try:
            photo = open('–º–µ–º—ã/1 (' + str(photoNumber) + ').png', 'rb')
        except FileNotFoundError:
            print("–ù–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç (–Ω–µ png)")
        photoNumber += 1
        bot.send_photo(message.from_user.id, photo)
    elif message.text == "/rules":
        bot.forward_message(message.from_user.id, 431073306, 413)
    elif message.text == "/dealFinder":
        bot.register_next_step_handler(message, sellSneakers)
    elif message.text == "hui":
        bot.reply_to(message, message.text.upper())
    else:
        bot.send_message(message.from_user.id, "–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é. –ù–∞–ø–∏—à–∏ /help.")


def name(message):
    global name  # –≤–∏–¥–∏–º–æ —á—Ç–æ–±—ã –ø—Ä–∏—Å–≤–æ–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω–æ–º—É –∏–º–µ–Ω–∏ –≤–ø–∏—Å–∞–Ω–Ω–æ–µ –∏–º—è –≤ —á–∞—Ç–∏–∫–µ)
    name = message.text
    bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é")
    bot.register_next_step_handler(message, family)


def family(message):
    global family
    family = message.text
    bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç")
    bot.register_next_step_handler(message, get_age)


def get_age(message):
    global age
    while age == 0:  # –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤–æ–∑—Ä–∞—Å—Ç –∏–∑–º–µ–Ω–∏–ª—Å—è
        try:
            age = int(message.text)  # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–æ–∑—Ä–∞—Å—Ç –≤–≤–µ–¥–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        except Exception:
            bot.send_message(message.from_user.id, '–¶–∏—Ñ—Ä–∞–º–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞')
    bot.send_message(message.from_user.id, '–¢–µ–±–µ ' + str(age) + ' –ª–µ—Ç, —Ç–µ–±—è –∑–æ–≤—É—Ç ' + name + ' ' + family + '?')
    keyboard = types.InlineKeyboardMarkup()  # –Ω–∞—à–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    key_yes = types.InlineKeyboardButton(text='–î–∞', callback_data='yes');  # –∫–Ω–æ–ø–∫–∞ ¬´–î–∞¬ª
    keyboard.add(key_yes)  # –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    key_no = types.InlineKeyboardButton(text='–ù–µ—Ç', callback_data='no');
    keyboard.add(key_no)
    question = '–¢–µ–±–µ ' + str(age) + ' –ª–µ—Ç, —Ç–µ–±—è –∑–æ–≤—É—Ç ' + name + ' ' + family + '?';
    bot.send_message(message.from_user.id, text=question, reply_markup=keyboard)


def sellSneakers(message):
    pass


@bot.callback_query_handler(func=lambda call: True)
def callback_worker(call):
    if call.data == "yes":  # call.data —ç—Ç–æ callback_data, –∫–æ—Ç–æ—Ä—É—é –º—ã —É–∫–∞–∑–∞–ª–∏ –ø—Ä–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–∏ –∫–Ω–æ–ø–∫–∏
        ...  # –∫–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö, –∏–ª–∏ –∏—Ö –æ–±—Ä–∞–±–æ—Ç–∫–∏
        reg_new_user = (
            "INSERT INTO vagina(first_name, surname, age) values (%(first_name)s, %(second_name)s, %(age)s)")
        data_person = {
            'first_name': name,
            'second_name': family,
            'age': age,
        }
        cursor.execute(reg_new_user, data_person)
        conn.commit()
        # —Ç—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —Ç–∞–±–ª–∏—Ü—É
        bot.send_message(call.message.chat.id, '–ó–∞–ø–æ–º–Ω—é : )');
    elif call.data == "no":
        ...  # –ø–µ—Ä–µ—Å–ø—Ä–∞—à–∏–≤–∞–µ–º

# —ç—Ç–∞ —Ö—É–∏—Ç–∞ –ø—Ä–æ–≤–æ–¥–∏—Ç –ø—Ä–æ—Å—Ç–æ –æ–ø—Ä–æ—Å –µ—Å—Ç—å –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 0 —Å–µ–∫—É–Ω–¥
bot.polling(none_stop=True, interval=0)
